# Generated by Django 5.2.7 on 2025-10-02 09:55

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AnalyticsSnapshot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('snapshot_date', models.DateField(unique=True)),
                ('total_students', models.IntegerField(default=0)),
                ('total_teachers', models.IntegerField(default=0)),
                ('attendance_average', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('assignment_completion_rate', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('library_usage', models.IntegerField(default=0)),
                ('fee_collection_rate', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('data', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-snapshot_date'],
            },
        ),
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('badge_type', models.CharField(choices=[('attendance', 'Attendance'), ('assignment', 'Assignment'), ('participation', 'Participation'), ('achievement', 'Achievement'), ('special', 'Special')], max_length=20)),
                ('icon', models.CharField(default='üèÜ', max_length=50)),
                ('points_required', models.IntegerField(default=100)),
                ('color', models.CharField(default='#FFD700', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['points_required'],
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('semester', models.IntegerField()),
                ('credits', models.IntegerField()),
                ('department', models.CharField(max_length=100)),
                ('max_students', models.IntegerField(default=60)),
            ],
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room_number', models.CharField(max_length=50, unique=True)),
                ('room_type', models.CharField(choices=[('classroom', 'Classroom'), ('lab', 'Laboratory'), ('auditorium', 'Auditorium'), ('seminar', 'Seminar Hall')], max_length=20)),
                ('capacity', models.IntegerField()),
                ('building', models.CharField(max_length=100)),
                ('has_projector', models.BooleanField(default=False)),
                ('has_lab_equipment', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='CareerRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('career_path', models.CharField(max_length=200)),
                ('match_percentage', models.DecimalField(decimal_places=2, max_digits=5)),
                ('description', models.TextField()),
                ('required_skills', models.TextField()),
                ('salary_range', models.CharField(blank=True, max_length=100)),
                ('job_outlook', models.TextField(blank=True)),
                ('recommended_courses', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='career_recommendations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-match_percentage', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Certificate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('certificate_type', models.CharField(choices=[('completion', 'Course Completion'), ('achievement', 'Achievement'), ('participation', 'Participation'), ('degree', 'Degree Certificate')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('issue_date', models.DateField(auto_now_add=True)),
                ('certificate_hash', models.CharField(max_length=256, unique=True)),
                ('blockchain_txid', models.CharField(blank=True, max_length=256, null=True)),
                ('ipfs_hash', models.CharField(blank=True, max_length=256, null=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('metadata', models.JSONField(default=dict)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='certificates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-issue_date'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('deadline', 'Deadline'), ('appointment', 'Appointment'), ('assignment', 'Assignment'), ('fee_due', 'Fee Due'), ('announcement', 'Announcement'), ('badge_earned', 'Badge Earned'), ('system', 'System')], max_length=50)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('link', models.CharField(blank=True, max_length=255)),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PointTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.IntegerField()),
                ('reason', models.CharField(max_length=200)),
                ('category', models.CharField(choices=[('attendance', 'Attendance'), ('assignment', 'Assignment'), ('participation', 'Participation'), ('bonus', 'Bonus'), ('penalty', 'Penalty')], max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='point_transactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StudentPoints',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_points', models.IntegerField(default=0)),
                ('attendance_points', models.IntegerField(default=0)),
                ('assignment_points', models.IntegerField(default=0)),
                ('participation_points', models.IntegerField(default=0)),
                ('rank', models.IntegerField(blank=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student_points', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Student Points',
                'ordering': ['-total_points'],
            },
        ),
        migrations.CreateModel(
            name='TimeSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.CharField(choices=[('monday', 'Monday'), ('tuesday', 'Tuesday'), ('wednesday', 'Wednesday'), ('thursday', 'Thursday'), ('friday', 'Friday'), ('saturday', 'Saturday')], max_length=10)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('slot_name', models.CharField(max_length=50)),
            ],
            options={
                'ordering': ['day_of_week', 'start_time'],
                'unique_together': {('day_of_week', 'start_time')},
            },
        ),
        migrations.CreateModel(
            name='StudentBadge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('earned_at', models.DateTimeField(auto_now_add=True)),
                ('badge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='advanced_features.badge')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='earned_badges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-earned_at'],
                'unique_together': {('student', 'badge')},
            },
        ),
        migrations.CreateModel(
            name='StudentSkill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('skill_name', models.CharField(max_length=100)),
                ('skill_category', models.CharField(max_length=100)),
                ('proficiency_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], default='beginner', max_length=20)),
                ('acquired_date', models.DateField(auto_now_add=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skills', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('student', 'skill_name')},
            },
        ),
        migrations.CreateModel(
            name='TimetableEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('academic_year', models.CharField(max_length=20)),
                ('semester', models.IntegerField()),
                ('is_active', models.BooleanField(default=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='advanced_features.course')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='advanced_features.room')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teaching_slots', to=settings.AUTH_USER_MODEL)),
                ('time_slot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='advanced_features.timeslot')),
            ],
            options={
                'verbose_name_plural': 'Timetable Entries',
                'unique_together': {('room', 'time_slot', 'is_active'), ('teacher', 'time_slot', 'is_active')},
            },
        ),
    ]
